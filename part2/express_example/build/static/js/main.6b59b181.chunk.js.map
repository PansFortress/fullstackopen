{"version":3,"sources":["services/notes.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","Note","note","toggleImportance","label","important","content","onClick","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","toggleImportanceOf","onSubmit","event","preventDefault","console","log","target","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"kNAEMA,EAAU,kCAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCbrCK,EAAO,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,KAmF3BI,EA9EH,SAAAC,GAAU,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEWF,mBAAS,cAFpB,mBAEZG,EAFY,KAEHC,EAFG,OAGWJ,oBAAS,GAHpB,mBAGZK,EAHY,KAGHC,EAHG,KAanBC,qBARa,WACTC,IAECxB,MAAK,SAAAyB,GACJP,EAASO,QAIC,IAEhB,IAAMC,EAAcL,EAChBJ,EACAA,EAAMU,QAAO,SAAAnB,GAAI,OAAuB,IAAnBA,EAAKG,aAsC9B,OACE,6BACE,qCACA,4BACGe,EAAYE,KAAI,SAACpB,EAAMqB,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACLrB,KAAMA,EACNC,iBAAkB,kBApBD,SAACJ,GAC1B,IAAMG,EAAOS,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAOA,KAChC4B,EAAW,eAAOzB,EAAP,CAAaG,WAAYH,EAAKG,YAE/Ca,EACUnB,EAAI4B,GACXjC,MAAK,SAAAkC,GACJhB,EAASD,EAAMW,KAAI,SAAApB,GAAI,OAAIA,EAAKH,KAAOA,EAAKG,EAAO0B,SAavBC,CAAmB3B,EAAKH,WAKtD,0BAAM+B,SAjDM,SAAAC,GACdA,EAAMC,iBACNC,QAAQC,IAAI,iBAAkBH,EAAMI,QAGpC,IAAMC,EAAa,CACjB9B,QAASO,EACTwB,MAAM,IAAIC,MAAOC,cACjBlC,UAAWmC,KAAKC,SAAW,IAG7BvB,EACUkB,GACP1C,MAAK,SAAAkC,GACJhB,EAASD,EAAM+B,OAAOd,IACtBd,EAAW,SAmCX,2BAAO6B,MAAO9B,EAAS+B,SA9BJ,SAAAb,GACvBjB,EAAWiB,EAAMI,OAAOQ,UA8BpB,4BAAQE,KAAK,UAAb,SAGF,4BAAQtC,QAAS,kBAAMS,GAAYD,KAAnC,oBCnFN+B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6b59b181.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = 'http://localhost:3001/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default {getAll, create, update}","import React, { useState, useEffect } from \"react\";\nimport noteService from './services/notes'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important'\n\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nconst App = props => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note\");\n  const [showAll, setShowAll] = useState(false);\n\n  const hook = () => {\n      noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }\n\n  useEffect(hook, [])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true);\n\n  const addNote = event => {\n    event.preventDefault();\n    console.log(\"button clicked\", event.target);\n\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n\n  };\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n    \n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        {notesToShow.map((note, i) => (\n          <Note \n            key={i} \n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n\n      <button onClick={() => setShowAll(!showAll)}>Toggle Showing</button>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}